
name: 'CI Release'

on:
    release:
      types: [published]

jobs:
  windows:
    name: 'Windows 32+64bit'
    runs-on: [windows-latest]
    env:
      QT_VERSION: '5.10.1'
      WINDOWS_DEPS_VERSION: '2017'
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.0
      - name: 'Install prerequisite: QT'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/Qt_${{ env.QT_VERSION }}.7z -f --retry 5 -C -
          7z x Qt_${{ env.QT_VERSION }}.7z -o"${{ github.workspace }}\cmbuild\QT"
      - name: 'Install prerequisite: Pre-built OBS dependencies'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -o"${{ github.workspace }}\cmbuild\deps"
      - name: 'Install prerequisite: NSIS'
        working-directory: ${{ github.workspace }}
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop bucket add extras
          scoop install nsis
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Checkout obs-rtspserver'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
          submodules: 'recursive'
      - name: 'Get obs-rtspserver tag'
        shell: bash
        run: |
          echo ::set-env name=GIT_TAG::${GITHUB_REF/refs\/tags\//}
      - name: 'Checkout obs-rtspserver release (${{ env.GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
        run: |
          git checkout ${{ env.GIT_TAG }}
          git submodule update
      - name: 'Add obs-rtspserver Subdirectory'
        working-directory: ${{ github.workspace }}/obs-studio/plugins
        run: echo "add_subdirectory(obs-rtspserver)" >> .\CMakeLists.txt
      - name: 'Configure OBS 32-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build32
          cd .\build32
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A Win32 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win32" -DBUILD_CAPTIONS=YES -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build obs-rtspserver 32-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build32\plugins\obs-rtspserver\obs-rtspserver.vcxproj
      - name: 'Configure OBS 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build64
          cd .\build64
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A x64 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017_64" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win64" -DBUILD_CAPTIONS=YES -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build obs-rtspserver 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build64\plugins\obs-rtspserver\obs-rtspserver.vcxproj
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-rtspserver-${{ env.GIT_TAG }}-windows"
          echo "::set-env name=WIN_FILENAME::$FILENAME"
      - name: 'Package obs-rtspserver'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build-package\obs-plugins\64bit
          mkdir build-package\obs-plugins\32bit
          mkdir build-package\data\obs-plugins\obs-rtspserver\locale\
          robocopy .\obs-studio\build64\plugins\obs-rtspserver\RelWithDebInfo\ .\build-package\obs-plugins\64bit\ obs-rtspserver.dll obs-rtspserver.pdb
          robocopy .\obs-studio\build32\plugins\obs-rtspserver\RelWithDebInfo\ .\build-package\obs-plugins\32bit\ obs-rtspserver.dll obs-rtspserver.pdb
          robocopy /E .\obs-studio\plugins\obs-rtspserver\data\ .\build-package\data\obs-plugins\obs-rtspserver\ *
          robocopy .\obs-studio\plugins\obs-rtspserver\ .\installer\ LICENSE
          robocopy .\obs-studio\plugins\obs-rtspserver\installer\ .\installer\ installer.nsi obs.ico
          mkdir release
          7z a ".\release\${{ env.WIN_FILENAME }}.zip" ".\build-package\*"
      - name: 'Publish ${{ env.WIN_FILENAME }}.zip'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-windows'
          path: ${{ github.workspace }}\release\*.zip
      - name: Build obs-rtspserver installer
        working-directory: ${{ github.workspace }}\installer
        run: makensis /DVERSION=${{ env.GIT_TAG }} .\installer.nsi
      - name: 'Publish ${{ env.WIN_FILENAME }}-windows-installer.exe'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-windows-installer'
          path: ${{ github.workspace }}\build-package\*.exe

  linux:
    name: 'Linux 32+64bit'
    runs-on: [ubuntu-latest]
    steps:
      - name: 'Install prerequisite'
        run: |
         sudo apt-get update
         sudo apt-get install \
           build-essential checkinstall cmake git libmbedtls-dev libasound2-dev libavcodec-dev libavdevice-dev \
           libavfilter-dev libavformat-dev libavutil-dev libcurl4-openssl-dev libfdk-aac-dev libfontconfig-dev \
           libfreetype6-dev libgl1-mesa-dev libjack-jackd2-dev libjansson-dev libluajit-5.1-dev libpulse-dev \
           libqt5x11extras5-dev libspeexdsp-dev libswresample-dev libswscale-dev libudev-dev libv4l-dev \
           libvlc-dev libx11-dev libx264-dev libxcb-shm0-dev libxcb-xinerama0-dev libxcomposite-dev \
           libxinerama-dev pkg-config python3-dev qtbase5-dev libqt5svg5-dev swig libxcb-randr0-dev \
           libxcb-xfixes0-dev libx11-xcb-dev libxcb1-dev
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Checkout obs-rtspserver'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
          submodules: 'recursive'
      - name: 'Get obs-rtspserver tag'
        shell: bash
        run: |
          echo ::set-env name=GIT_TAG::${GITHUB_REF/refs\/tags\//}
      - name: 'Checkout obs-rtspserver release (${{ env.GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
        run: |
          git checkout ${{ env.GIT_TAG }}
          git submodule update
      - name: 'Add obs-rtspserver Subdirectory'
        working-directory: ${{ github.workspace }}/obs-studio/plugins
        run: echo "add_subdirectory(obs-rtspserver)" >> ./CMakeLists.txt
      - name: 'Configure OBS 32-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir ./build32
          cd ./build32
          cmake -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr ..
#      - name: 'Build obs-rtspserver 32-bit'
#        working-directory: ${{ github.workspace }}/obs-studio/build32/plugins/obs-rtspserver/
#        run: |
#          make -j4
      - name: 'Configure OBS 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir ./build64
          cd ./build64
          cmake -DUNIX_STRUCTURE=1 -DCMAKE_INSTALL_PREFIX=/usr ..
      - name: 'Build obs-rtspserver 64-bit'
        working-directory: ${{ github.workspace }}/obs-studio/build64/plugins/obs-rtspserver/
        run: |
          make -j4
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-rtspserver-${{ env.GIT_TAG }}-linux"
          echo "::set-env name=LINUX_FILENAME::$FILENAME"
      - name: 'Package obs-rtspserver'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p build-package/obs-plugins/64bit
          mkdir -p build-package/obs-plugins/32bit
          mkdir -p build-package/data/obs-plugins/obs-rtspserver/locale/
          cp ./obs-studio/build64/plugins/obs-rtspserver/obs-rtspserver.so ./build-package/obs-plugins/64bit/
          cp -r ./obs-studio/plugins/obs-rtspserver/data/* ./build-package/data/obs-plugins/obs-rtspserver/
          mkdir release
          tar zcvf "./release/${{ env.LINUX_FILENAME }}.tar.gz" "./build-package"
      - name: 'Publish ${{ env.LINUX_FILENAME }}.tar.gz'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-linux'
          path: ${{ github.workspace }}/release/*.tar.gz

  make-release:
    name: 'Upload release'
    runs-on: [ubuntu-latest]
    needs: [windows, linux]
    steps:
      - name: 'Get the version'
        shell: bash
        id: get_version
        run: |
          echo ::set-env name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2-preview
      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.TAG_VERSION }}-windows/obs-rtspserver-${{ env.TAG_VERSION }}-windows.zip
          asset_name: obs-rtspserver-${{ env.TAG_VERSION }}-windows.zip
          asset_content_type: application/zip
      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.TAG_VERSION }}-windows-installer/obs-rtspserver-${{ env.TAG_VERSION }}-windows-installer.exe
          asset_name: obs-rtspserver-${{ env.TAG_VERSION }}-windows-installer.exe
          asset_content_type: application/x-msdownload
      - name: 'Upload linux .tar.gz artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.TAG_VERSION }}-linux/obs-rtspserver-${{ env.TAG_VERSION }}-linux.tar.gz
          asset_name: obs-rtspserver-${{ env.TAG_VERSION }}-linux.tar.gz
          asset_content_type: application/x-tar
      
